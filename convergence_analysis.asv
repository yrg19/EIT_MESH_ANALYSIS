%% Analysise meshes for convergence 

clear 
clc
close all 

%% Preamble  

run('/home/yuval/Packages_and_tools/eidors-v3.10-ng/eidors/startup.m')
addpath('/home/yuval/Packages_and_tools/Random_functions')
addpath(genpath('/home/yuval/Packages_and_tools/Reconstruction-master/'))

coarse=[5 10 40]; 
fine=[0.2 2 5]; 
radius=[0.5 1 2]; 
facet_ratio=[2 5 10]; 
facet_angle=[15 30 70]; 
facet_distance=[0.1 0.5 1];

param_titles = {'Coarse Cell Size'; 'Fine Cell Size'; 'Radius Around Electrodes';'Facet Ratio'; 'Facet Angle';...
    'Facet Distance'};

params = {coarse, fine, radius, facet_ratio, facet_angle, facet_distance};


load('/home/yuval/Mesh_convergence/combi_forwards_v2.mat')

clc

%% Understand why meshes have not been processed 

mesh_removed = No_mesh; 

for i = 1:length(mesh_removed)

    if isempty(mesh_removed{i})
        mesh_r_reason(i) = 0; 
    elseif contains(mesh_removed{i}, 'elec_problem')
        mesh_r_reason(i) = 1; 
    elseif contains(mesh_removed{i}, 'too_big')
        mesh_r_reason(i) = 2; 
    else
        mesh_r_reason(i) = 3; 
    end 

end 

figure
hist(mesh_r_reason)
xticks(0:3)
xticklabels({'Good Mesh', 'Elec Problem', 'Too Big', 'No Mesh'})
%% Get the indices per mesh 


i = 0; 
for c = 1:length(coarse)
    for f = 1:length(fine)
        for r = 1:length(radius)
            for fr = 1:length(facet_ratio)
                for fa = 1:length(facet_angle)
                    for fd = 1:length(facet_distance)

                        i = i+ 1; 
                        all_ind_map(i,:) = [c, f, r, fr, fa, fd]; 
                    end 
                end 
            end 
        end 
    end 
end 

bad = find(mesh_r_reason ~= 0); 

B = all_ind_map(bad,:); 

linearIndices = sub2ind([3, 3, 3, 3, 3, 3], ...
                        B(:, 1), B(:, 2), B(:, 3), B(:, 4), B(:, 5), B(:, 6));


num_bad = num_elem(linearIndices); 

B = all_ind_map(find(mesh_r_reason == 0),:); 

linearIndices = sub2ind([3, 3, 3, 3, 3, 3], ...
                        B(:, 1), B(:, 2), B(:, 3), B(:, 4), B(:, 5), B(:, 6));


num_survived = num_elem(linearIndices); 

[sorted,id] = sort(num_survived); 



%% Parameter Differences in measurements 


p = ~any(isnan(all_ind_map'));

sur_ind_map = all_ind_map(p,:); 
sorted_ind_map = sur_ind_map(id,:); 

G = sum((combi_op_fwd(p,:).^2)');
Ne_par = all_ind_map(p,:);

figure;
names ={"coarse","fine","radius","ratio","angle","distance"};
for i = 1:6
    
    subplot(2,3,i)
    scatter(Ne_par(:,i),G);
    hold on
    title(names{i});
    t = unique(Ne_par(:,i));
    K=zeros(length(t),1);
    for j = 1:length(t)
        K(j) = mean(G(Ne_par(:,i)==t(j)));
    end
    plot(t,K,'r');
     
end

%% Compare dvs by number of elements and by parameter

p = ~any(isnan(ind_map'));

% %plot(combi_mesh_fwd(p,:)');
% G = sum((combi_mesh_fwd(p,:).^2)');
% Ne_par = ind_map(p,:);
% %
% figure;
% names ={"course","fine","readius","ratio","angle","distance"};
% for i = 1:6
%     subplot(2,3,i)
%     scatter(Ne_par(:,i),G);
%     hold on
%     title(names{i});
%     t = unique(Ne_par(:,i));
%     K=zeros(length(t),1);
%     for j = 1:length(t)
%         K(j) = mean(G(Ne_par(:,i)==t(j)));
%     end
%     plot(t,K,'r');
% 
% 
% end

G2 = combi_mesh_fwd(p,:)'; 
meas_sort = G2(:,id); 

[N, H] = hist(sorted); 

figure; 
scatter(sorted, meas_sort)
xlabel('Number of elements')
ylabel('dVs')



%% Convergence by size of mesh 

factor = 10;
st = factor + 1; 

binEdges = [sorted(st:factor:end); sorted(end)];


[N,edges,bin] = histcounts(sorted, binEdges'); 

bin = bin+1; 

var = []; size_cat = []; 

for w = 1:length(unique(bin))

    size_cat(w) = length(find(bin == w)); 
end 

if sum(size_cat) ~= length(num_survived)
    error('Wrong Bin Sizes')
end 

min_size = min(size_cat); 

for b = 1:length(unique(bin))

    mat = meas_sort(:, bin == b); % get the measuremetns for all meshes from size category 

    %mat = mat .^2; 
    
    for n = 1:1000


        idx = randperm(size_cat(b),round(min_size/2)); 

        var(b,n) = mean(std(mat(:,idx), [], 2));

    end 

    var_ind_map{b} = sorted_ind_map(bin == b, :); 
end 

figure; 

scatter(1:length(unique(bin)), var)

hold on 
hLine = plot(mean(var,2)); % Line plot, store the handle in hLine
legend(hLine, 'Mean Variance') % Create a legend only for the line plot

xticks(1:length(unique(bin)))
xticklabels(round(edges ./ 1e6,1))
xlabel('Number of Elements, Millions')
ylabel('Mean Permuted Variance Across Measurements')
title('Mesh Convergence by Element Number')



%% Meshes to test 

name_test = []; 

ave= mean(var,2); 

test = [10:12, 23]; 

test2 = find(bin == test); 

i = 0; 

for b = 1:length(test) 

    tmp = var_ind_map(test(b),:); 


    for t = 1:length(tmp)

        i = i+1;
        name_test{i} = ['E05_mesh_',num2str(tmp(t,1)),'_coarse_',num2str(tmp(t,2)),'_fine_',num2str(tmp(t,3)),...
            '_rad_',num2str(tmp(t,4)),'_ratio_',num2str(tmp(t,5)),'_angle_',num2str(tmp(t,6)),'_dist_'];

    end
end

%% Save meshes to test in a new folder to transfer

cd('/home/eit/Mesh_convergence/')

if ~exist('meshes_to_test_pert/', 'dir')

    mkdir('meshes_to_test_pert')

end

for n = 1:length(name_test)

    wr = ['/home/eit/Mesh_convergence/', name_test{n}, 'img.mat'];

    copyfile(wr, 'meshes_to_test_pert')

end


%% Dedicing perturbation indices

% Parameters for DBSCAN
eps = 8;         % Maximum distance (in mm) between points to be considered as neighbors
minPts = 3;     % Minimum number of points to form a cluster (adjust based on your data)

% Perform DBSCAN clustering
cluster_idx = dbscan(E05_elecs, eps, minPts);
num_electrodes = sum(unique(cluster_idx) > 0);

% Step 4: Find the coordinates of each electrode by taking the mean of the clustered points
electrode_centroids = zeros(num_electrodes, 3);  % 64 electrodes, each with x, y, z coordinates

colors = rand(num_electrodes, 3); % Nx3 matrix with values between 0 and 1

for i = 1:num_electrodes
    electrode_centroids(i, :) = mean(E05_elecs(cluster_idx== i, :), 1);

    scatter3_lazy(E05_elecs(cluster_idx == i, :), [colors(i,1), colors(i,2), colors(i,3)]) % , E05_elecs(2,cluster_idx == i),electrode_coords_mm(3,cluster_idx == i))
    hold on 
end


%% Get random gitters to generate perturbations near electrodes 

% Create a 9x3 matrix (example)
A = rand(9,3);  % Random values for demonstration

% Generate random values between 0.5 and 1
random_values = 3 + (1-0.5) * rand(9,3);

% Generate random signs (-1 or 1)
random_signs = randi([0,1], 9,3) * 2 - 1; % Converts 0s to -1s and 1s remain 1s

% Apply random addition/subtraction
A_modified = A + (random_values .* -1); % .* random_signs);


%% Choose perturbation locations 

ele_near = (electrode_centroids + A_modified) ./1000; % add gitters and convert to meters 
ri = randperm(num_electrodes, 5); 

ele_med = (electrode_centroids + (A_modified + [-10 17 -15]))./1000; % add bigger gitters and convert to meters 
ele_far = abs(electrode_centroids + (A_modified + [-10 40 -10]))./1000;

true_spike = (mean(E05_elecs(9:12,:),1) + A_modified(1,:)) ./1000; 

pert_test = {ele_near(ri(1),:), ele_near(ri(2),:), ele_near(ri(3),:), ele_near(ri(4),:), ele_near(ri(5),:)...
    ele_med(ri(1),:), ele_med(ri(3),:), ele_far(ri(4),:), true_spike, true_spike, ele_near(ri(1),:)};

pert_name = {'near1', 'near2', 'near3', 'near4', 'near5', 'med1', 'med2', 'far', 'real', 'real_0.5%', 'near1_0.5%',};

%% Plot perturbations 

c = find_element_centres(img.fwd_model);

d = [2 3 10 11]; 

for p = 7 % 1:4 %1:length(pert_test)

    figure 

    idx = find_perturbation_indices(c,1,0.005,pert_test{p});

    imgi=img;

    imgi.elem_data(idx{1}) = 10;

    show_fem(imgi)

    title(pert_name{p})

end 


save('Perturbations', 'pert_name', 'pert_test', 'A_modified', 'ele_near', 'electrode_centroids', 'ele_far', 'ele_med', 'true_spike', 'ri'); 
%% Simulation reconstruction error


load('names_to_test.mat')
load('Perturbations.mat')

if ~exist('tests_recon', 'dir')

    mkdir('tests_recon')
end
 

for n = 1:30 %length(name_test)

    clear img imgi near_elec Sigma J X c

    cd('/home/yuval/Documents/Mesh_convergence_analysis')

    load([name_test{n},'img.mat'])

    disp(['*************************** Calculating Mesh Number ', num2str(n), ' - ', name_test{n}, ' ******************************'])

    c = find_element_centres(img.fwd_model);

    J = calc_jacobian(img);

    imgh = img;
       
    v1 = fwd_solve(imgh);

    [Mesh_hex,J_hex] = convert_fine2coarse(imgh.fwd_model.elems,imgh.fwd_model.nodes,J,4 * 1e-3); % make element size 0.5mm

    cd('tests_recon')

%     load([name_test{n},'recon.mat'])
% 
%     pert.fwd_sol = []; 

   % v1 = pert.fwd_sol{1}; 

    for p = 1:length(pert_name)
% 
%         J_hex = pert.J_hex{1}; 
%         Mesh_hex = pert.mesh_hex{1}; 
%         
        idx = find_perturbation_indices(c,1,0.005,pert_test{p});
        
        imgi=img;

        TF = endsWith(pert_name{p},'%');

        if TF == 1 
            imgi.elem_data(idx{1}) = imgi.elem_data(idx{1}) .* 1.005;
        else    
            imgi.elem_data(idx{1}) = imgi.elem_data(idx{1}) .* 1.01;     
        end 

        v2 = fwd_solve(imgi);

        dv = v2.meas - v1.meas;
        
        noise_size=[200, length(dv)];
        Noise = 1*1e-6*randn(noise_size);

        [Sigma,X] = eit_recon_tik0(dv',J_hex,logspace(-25,2,250), Noise);

        imgr = imgh;

        for i = 1:length(Mesh_hex.cells)
            imgr.elem_data(Mesh_hex.cells{i}) = Sigma(i);
        end


        %near_elec.J = J;
        pert.Sigma{p}= Sigma;
        pert.X{p} = X;
        pert.dv{p} = dv;
        pert.imgi{p} = imgi; % unregularised pert
        pert.imgr{p} = imgr; % hexagonised, regularised image
        pert.mesh_hex{1} = Mesh_hex;
        pert.J_hex{1} = J_hex;
        pert.fwd_sol = v1; 
 

        writeVTKcell_orig(['recon_mesh_', num2str(n), '_',pert_name{p}],imgr.fwd_model.elems,imgr.fwd_model.nodes,imgr.elem_data)

        writeVTKcell_orig(['simulated_mesh_', num2str(n), '_',pert_name{p}],imgi.fwd_model.elems,imgi.fwd_model.nodes,imgi.elem_data)
    
    end

    save([name_test{n},'recon.mat'], "pert", '-v7.3')

    close all 

end


%% Calculate WSV 

load('/home/yuval/Documents/Mesh_convergence_analysis/names_to_test.mat')

WSV_true = zeros(length(name_test), length(pert_test)); 
WSV_recon = zeros(length(name_test), length(pert_test)); 

for n = 1:30 %length(name_test) 

    load(['/home/yuval/Documents/Mesh_convergence_analysis/', name_test{n}, 'img.mat'])

    load(['/home/yuval/Documents/Mesh_convergence_analysis/tests_recon/', name_test{n}, 'recon.mat'])

    for p = 1:length(pert_test)

        true_com = pert_test{p}; % true pert centre of mass 
    
        Sigma = pert.Sigma{p}; 
    
        Sigma(isnan(Sigma)) = 0; 
    
        [WSV_true(n,p), WSV_recon(n,p)] = calc_wsv(img, pert.imgi{p},true_com, Sigma, pert.mesh_hex{1}); 

    end 

    disp(['******* Calclated WSV for Mesh Number ', num2str(n), ' ***********'])

end 

save('WSV', 'WSV_recon', 'WSV_true', 'pert_test', 'pert_name')

%% scale the WSV2 by WSV1 (true pert) 

reg_WSV = WSV_recon./WSV_true; 

min_WSV = reg_WSV(1:30, :) - 1; 

min_WSV = sum(min_WSV, 2); 

numColors = 11;
bgColor = [1 1 1]; % Background color (white)
colors2 = distinguishable_colors(numColors, bgColor);

colors = [
    116, 115, 129;
    255, 165, 0;
    82, 87, 109;
    93, 85, 109;
    81, 86, 118;
    84, 91, 109;
    78, 83, 103;
    84, 83, 114;
    89, 78, 110;
    68, 71, 90; 
    0, 255, 0;
];

order = [1, 11, 2:10]; 

hold on;
for i = 1:7
    scatter(1:30, log(reg_WSV(1:30, order(i))), 150, colors(i, :), 'filled');
end
hold off;
pert_name = strrep(pert_name, '_', ' '); % Replace underscore with space
pert_name2 = pert_name([1, 11, 2:10]); % Extracts elements at indices 1, 11, and 2-10

legend(pert_name2, 'Interpreter', 'none', 'FontSize',14); % Prevents MATLAB from interpreting special characters

ylabel('Log Scale Corrected WSV', 'FontSize',14)
xlabel('Mesh Number', 'FontSize',14)
title('Log Scale WSV by Perturbation', 'FontSize',16)


%%

h1 = [reg_WSV(1:30, [9:10, 1, 11,2:8]), min_WSV]; 
h2 = [pert_name([9:10, 1, 11,2:8]), 'Sum']; 

C_cap = cellfun(@(x) strcat(upper(x(1)), x(2:end)), h2, 'UniformOutput', false);
C_fixed = strrep(C_cap, '_', '\_');  % Escape underscores

h = heatmap((1:30),C_fixed, h1');

% Adjust colormap for more contrast in small values
cmap = jet(256);  % Choose a colormap (e.g., parula, hot, jet)
colormap(cmap);

% Adjust color limits to maintain contrast
caxis(0:3);  

% Labels
h.Title = 'Reconstruction Accuracy Heatmap';
h.XLabel = 'Mesh Number';
h.YLabel = 'Perturbation';

% Customize grid lines and cell labels if needed
h.GridVisible = 'off';  % Remove grid lines for a smoother look
h.ColorbarVisible = 'on';  % Ensure colorbar is displayed


surf((1:30), C_fixed, h1'); %, 'LineStyle','none')
view(2)
colormap(jet(1000))
cb = colorbar();
tl = [0 3 40];
cb.Ticks = sign(tl).*log10(1+abs(tl));
cb.TickLabels = tl;

%% Getting the thresholds for image reconstruction visualisation 

for n = 1:30 

    load([name_test{n}, 'recon.mat'])

    for p = 1:length(pert_test)

        pert_threshold(n,p) = max(pert.Sigma{p}); 

    end

    disp(['finished mesh ', num2str(n)])

end 

%% Calc reconstruction 

cd('/home/eit/Mesh_convergence')

for n = 1:length(name_test)

    clear imgr near_elec Sigma J X c

    load([name_test{n},'recon.mat'])

    disp(['*************************** Calculating Mesh ', name_test{n}, ' ******************************'])
    
    imgr = near_elec.imgi;
    imgr.elem_data = near_elec.Sigma;


    figure;
    show_slices(imgr,[inf inf 0.130]);
    title('Regularised Image')
    figure;
    show_slices(near_elec.imgi,[inf inf 0.130]);
    title('Unregularised Image')

end 



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Drafts %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Forwards per param 

figure
for p = 6:-1:1

    nexttile 

    mat = []; xdat = []; 

    for t = 1:3

        e = params{p}(t); 

        ind = find(ind_map(:,p,:,:,:,:) == e);
        param_combi{p,t}= combi_mesh_fwd(ind,:); 

         % Append the data to mat and xdat
       mat = [mat; param_combi{p, t}(:)];
       xdat = [xdat; t * ones(length(param_combi{p, t}(:)), 1)];
    
       % if isempty(param_combi{p,t})
       % 
       %     continue
       % 
       % else 
       % 
       % 
       %     mat{t} = [param_combi{p,t}(:)];
       %
       % end


    end

    %  violin(mat)

    boxchart(xdat,mat)
    title(param_titles{p})


    xticks(1:3)
    xticklabels(params{p})


end




% %% Forward per param
%
% figure
% 
% for p = 1:length(params)
% 
% 
%     if p == 1
% 
%         param_combi = squeeze(combi_op_fwd(1,:,:,:,:,:,:));
% 
%         param_combi1 = param_combi(:);
% 
%         param_combi = squeeze(combi_op_fwd(2,:,:,:,:,:,:));
% 
%         param_combi2 = param_combi(:);
% 
%         param_combi = squeeze(combi_op_fwd(3,:,:,:,:,:,:));
% 
%         param_combi3 = param_combi(:);
% 
%     elseif p == 2
% 
% 
%         param_combi = squeeze(combi_op_fwd(:,1,:,:,:,:,:));
% 
%         param_combi1 = param_combi(:);
% 
%         param_combi = squeeze(combi_op_fwd(:,2,:,:,:,:,:));
% 
%         param_combi2 = param_combi(:);
% 
%         param_combi = squeeze(combi_op_fwd(:,3,:,:,:,:,:));
% 
%         param_combi3 = param_combi(:);
% 
%     elseif p == 3
% 
%         param_combi = squeeze(combi_op_fwd(:,:,1,:,:,:,:));
% 
%         param_combi1 = param_combi(:);
% 
%         param_combi = squeeze(combi_op_fwd(:,:,2,:,:,:,:));
% 
%         param_combi2 = param_combi(:);
% 
%         param_combi = squeeze(combi_op_fwd(:,:,3,:,:,:,:));
% 
%         param_combi3 = param_combi(:);
% 
%     elseif p == 4
% 
% 
%         param_combi = squeeze(combi_op_fwd(:,:,:,1,:,:,:));
% 
%         param_combi1 = param_combi(:);
% 
%         param_combi = squeeze(combi_op_fwd(:,:,:,2,:,:,:));
% 
%         param_combi2 = param_combi(:);
% 
%         param_combi = squeeze(combi_op_fwd(:,:,:,3,:,:,:));
% 
%         param_combi3 = param_combi(:);
% 
% 
%     elseif p == 5
% 
%         param_combi = squeeze(combi_op_fwd(:,:,:,:,1,:,:));
% 
%         param_combi1 = param_combi(:);
% 
%         param_combi = squeeze(combi_op_fwd(:,:,:,:,2,:,:));
% 
%         param_combi2 = param_combi(:);
% 
%         % param_combi = squeeze(combi_op_fwd(:,:,:,:,3,:,:));
% 
%         param_combi3 = param_combi(:) .* 0;
% 
%     elseif p == 6
% 
% 
%         param_combi = squeeze(combi_op_fwd(:,:,:,:,:,1,:));
% 
%         param_combi1 = param_combi(:);
% 
%         param_combi = squeeze(combi_op_fwd(:,:,:,:,:,2,:));
% 
%         param_combi2 = param_combi(:);
% 
%         param_combi = squeeze(combi_op_fwd(:,:,:,:,:,3,:));
% 
%         param_combi3 = param_combi(:);
%     end
% 
%     nexttile
% 
%     mm = [param_combi1, param_combi2, param_combi3];
% 
%     boxchart(mm)
% 
%     title(param_titles{p})
% 
%     xticklabels(params{p})
% end




%% Calculate reference forward mesh

name = ['E05_mesh_',num2str(coarse(2), '%.2f'),'_coarse_',num2str(fine(2), '%.2f'),'_fine_',num2str(radius(2)),...
    '_rad_',num2str(facet_ratio(2)),'_ratio_',num2str(facet_angle(2)),'_angle_',num2str(facet_distance(2)),'_dist_'];


cd(inpath)

v1 = []; img = [];

Tetra = readmatrix([name,'tetra.csv']);

Nodes = readmatrix([name,'vertices.csv']);

%Create model

fmdl = mk_common_model('a2C');
fmdl = fmdl.fwd_model;

% add mesh elements and nodes based on MRI

Tetra_orig = Tetra;
Tetra(Tetra(:,5) == 1,:) = [];

% Find boundary and generate eidors model
fmdl.elems = Tetra(:,1:4);
fmdl.nodes = Nodes(:,1:3);
[fmdl.boundary]= dubs3_2(Tetra(:,1:4)); %Tetra(:,1:4)); %find_boundary(Tetra(:,1:4));  %

sig = zeros(length(Tetra),1);
sig(Tetra(:,5) == 2) = 1.79; % csf
sig(Tetra(:,5) == 3) = 0.3; % grey matter
sig(Tetra(:,5) == 4) = 0.15; % white matter


% Add electrodes

cd(outpath)
fmdl.electrode = struct('nodes',[],'z_contact',[]);

img = mk_image(fmdl,sig);

img = add_electrode_yuval(img,elecs,0.00155,0.0002);

[img.fwd_model, unused] = remove_disconnected_nodes(img.fwd_model);
img.fwd_model = remove_unused_nodes(img.fwd_model);

% Add stimulation protocol

img.fwd_model.stimulation = stim;

% Forward Solution

v1 = fwd_solve(img);


% Save forward and Jacobian matrices

ref_fwd = v1.meas;

save([name,'img.mat'],'img');

cd(outpath)
load('All_forwards')

save('All_forwards','Mesh_op_fwd', 'ref_fwd');


%% Comparing forward solutions

load([outpath,'/coarse_forwards_10.mat'])
load([outpath,'/All_forwards_10%.mat'])

coarse_op_fwd_or = coarse_op_fwd;

coarse_op_fwd = cat(1,squeeze(Mesh_op_fwd(1,1,:))', coarse_op_fwd_or);

coarse_op_fwd = coarse_op_fwd([1, 3:end],:);

t_val = [0.45,0.75:0.1:1.85];

for t = 2:size(coarse_op_fwd,1)
    
    c_fine = squeeze(coarse_op_fwd(t-1,:));
    c_coarse = squeeze(coarse_op_fwd(t,:));
    
    E(t-1) = sqrt(sum((c_fine - c_coarse).^2)/1220);
    
end

plot(E, 'marker','o')
xticklabels(t_val)
xticks(1:length(t_val))

%%

cd(outpath)
load('All_forwards.mat')

figure

for p = 1:length(params)
    
    for t = 2
        
        vm = squeeze(abs(Mesh_op_fwd(p,t,:)));
        
        Ev = max((vm - mean(vm))/ mean(vm));
        
        %vr = abs(ref_fwd);
        vr = squeeze(abs(Mesh_op_fwd(p,1,:)));
        
        Ec = max((vm - mean(vr))/ mean(vr));
        
        convg.raw(p,t,:) = [Ev; Ec];
        
        if Ec < Ev
            convg.bin(p,t) = 1;
        else
            convg.bin(p,t) = 0;
        end
        
        
        plot(vm)
        hold on
        plot(vr)
        hold on
    end
end


imagesc(convg.bin)





